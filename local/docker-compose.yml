# Each piece within the #'s could theoretically be its own machine. But it could also operate just on one big machine.
# Right now things are linked through docker. If we dploy with something else that doesn't respect links, thing will have to be refactored.
# Things could be factored as Minions being indivdiual machines and everything else goes on a master machine.

######## CADVISOR #########
cadvisor:
    image: google/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "0.0.0.0:8888:8080"
####################################


######## MINION MACHINE #########

minionredis:
    image: redis
    command: redis-server /next_backend/next/database_client/CacheStore/redis.conf
    volumes:
     - /hdd/work/NEXT:/next_backend
    expose:
     - "6379"
    stdin_open: true # to allow debugging
    tty: true

minionworker:
    build: /hdd/work/NEXT/next/base_docker_image
    command: ./next/broker/next_worker_startup.sh
    volumes:
     - /hdd/work/NEXT:/next_backend
    working_dir: /next_backend
    links:
      - mongodb:MONGODB
      - rabbitmq:RABBIT
      - rabbitmqredis:RABBITREDIS
      - minionredis:MINIONREDIS
      - vw_relevance:VW_RELEVANCE
    environment:
     - PYTHONUNBUFFERED=TRUE
     - CELERY_SYNC_WORKER_COUNT=6
     - CELERY_ASYNC_WORKER_COUNT=4
     - CELERY_THREADS_PER_ASYNC_WORKER=1
     # Should be max(1,int(.25*master_num_cpus))
     - CELERY_ASYNC_WORKER_PREFETCH=4
     - CELERY_DASHBOARD_WORKER_COUNT=1
     - CELERY_THREADS_PER_DASHBOARD_WORKER=2
     - CELERY_DASHBOARD_WORKER_PREFETCH=1
     - GIT_HASH=295ddfca129932eb822ca889f829400e52a7cec1
     - PYTHONPATH=:/next_backend
####################################


######### API #########
nextbackenddocker:
    build: /hdd/work/NEXT/next/base_docker_image
    command: gunicorn  --worker-class=gevent -R --log-level=debug --logger-class=simple --reload -b 0.0.0.0:8000 -w 1 next.api.api:app
    volumes:
     - /hdd/work/NEXT:/next_backend
    working_dir: /next_backend
    ports:
      - "0.0.0.0:8000:8000" # gunicorn
    links:
      # - miniondatabasedocker:MINIONDATABASESERVER  # right now the API makes database calls within the container to retrieve logs. This is bad! This work should be thrown on a queue and given to workers to do
      - rabbitmq:RABBIT
      - rabbitmqredis:RABBITREDIS
      - mongodb:MONGODB
      - minionworker:MINIONWORKER
    environment:
     - PYTHONUNBUFFERED=TRUE
     - PYTHONPATH=:/next_backend
     # global url for dashboards on backend
     - NEXT_BACKEND_GLOBAL_HOST
     - NEXT_BACKEND_GLOBAL_PORT
     - TERM=xterm
     - CELERY_ON=True
####################################



######### PERSISTENT STORE #########
mongodb:
    build: /hdd/work/NEXT/next/base_docker_image
    command: /usr/bin/mongod --smallfiles --rest
    volumes:
     - /hdd/work/NEXT:/next_backend
     - /dump
     - /data/db
    working_dir: /next_backend
    expose:
     - "27017"
    ports:
     - "0.0.0.0:28017:28017" # mongo http monitor

mongodbbackup:
    build: /hdd/work/NEXT/next/base_docker_image
    command: python ./next/database/daemon_database_backup.py
    volumes:
     - /hdd/work/NEXT:/next_backend
    volumes_from:
     - mongodb
    working_dir: /next_backend
    links:
     - mongodb:MONGODB
    environment:
     - NEXT_BACKEND_GLOBAL_HOST
     - PYTHONPATH=:/next_backend
     - PYTHONUNBUFFERED=TRUE
     - AWS_ACCESS_ID
     - AWS_SECRET_ACCESS_KEY
     - AWS_BUCKET_NAME
####################################


######### RABBITMQ #########
rabbitmq:
    image: rabbitmq:3-management
    ports:
     - "0.0.0.0:15672:15672"

rabbitmqredis:
    image: redis
###########################

######### VW (WEBSITE RELEVANCE, PRODUCT CLASSIFICATION) #########
vw_relevance:
    build: ../next/vowpal_wabbit_image/
    command: ["--save_resume --port 7000 --active --predictions /dev/null --daemon --audit"]
    container_name: vw_relevance
    ports:
        - "0.0.0.0:7000:7000"
    volumes:
        - ../next/vowpal_wabbit_image/saved_models:/saved_models

vw_product:
    build: ../next/vowpal_wabbit_image/
    command: ["--save_resume --port 9000 --active --predictions /dev/null --daemon --audit"]
    container_name: vw_product
    ports:
        - "0.0.0.0:9000:9000"
    volumes:
        - ../next/vowpal_wabbit_image/saved_models:/saved_models
###########################
